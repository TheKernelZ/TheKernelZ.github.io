<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TheKernelZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kernelylz.cn/"/>
  <updated>2019-04-29T07:40:29.086Z</updated>
  <id>https://kernelylz.cn/</id>
  
  <author>
    <name>TheKernel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLPlibs</title>
    <link href="https://kernelylz.cn/2019/04/29/NLPlibs/"/>
    <id>https://kernelylz.cn/2019/04/29/NLPlibs/</id>
    <published>2019-04-29T07:15:16.000Z</published>
    <updated>2019-04-29T07:40:29.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中英文敏感词过滤"><a href="#中英文敏感词过滤" class="headerlink" title="中英文敏感词过滤"></a><a href="https://github.com/observerss/textfilter" target="_blank" rel="noopener">中英文敏感词过滤</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f = DFAFilter()</span><br><span class="line">&gt;&gt;&gt;f.add(<span class="string">"sexy"</span>)</span><br><span class="line">&gt;&gt;&gt;f.filter(<span class="string">"hello sexy bavby"</span>)</span><br><span class="line">hello **** baby</span><br></pre></td></tr></table></figure><h2 id="两种语言检测"><a href="#两种语言检测" class="headerlink" title="两种语言检测"></a>两种语言检测</h2><h3 id="Langid"><a href="#Langid" class="headerlink" title="Langid"></a><a href="https://github.com/saffsd/langid.py" target="_blank" rel="noopener">Langid</a></h3><p><font size="3" color="grey">pip install langid</font>(准确率高，效率低)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> langid</span><br><span class="line">&gt;&gt;&gt;langid.classify(<span class="string">"This is a test"</span>)</span><br><span class="line">(<span class="string">'en'</span>, <span class="number">-54.41310358047485</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Langdetect"><a href="#Langdetect" class="headerlink" title="Langdetect"></a><a href="https://code.google.com/archive/p/language-detection/" target="_blank" rel="noopener">Langdetect</a></h3><p><font size="3" color="grey">pip install langdetect</font>(准确率低，效率高)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect</span><br><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect_langs</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"本篇博客主要介绍两款语言探测工具，用于区分文本到底是什么语言，"</span></span><br><span class="line">s2 = <span class="string">'We are pleased to introduce today a new technology'</span></span><br><span class="line"></span><br><span class="line">print(detect(s1))</span><br><span class="line">print(detect(s2))</span><br><span class="line">print(detect_langs(s3))    <span class="comment"># 输出探测出的所有语言类型及其所占的比例</span></span><br></pre></td></tr></table></figure></p><h2 id="手机归属地查询"><a href="#手机归属地查询" class="headerlink" title="手机归属地查询"></a><a href="https://github.com/ls0f/phone" target="_blank" rel="noopener">手机归属地查询</a></h2><p><font size="3" color="grey">pip install phone</font>(支持号段: 13 ,15 ,18 ,14[5,7],17[0,6,7,8])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phone <span class="keyword">import</span> Phone</span><br><span class="line"></span><br><span class="line">p  = Phone()</span><br><span class="line">result = p.find(<span class="number">17342019665</span>)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="phone.jpg" alt title class>                <p></p>            </figure><h2 id="依据名字判断性别"><a href="#依据名字判断性别" class="headerlink" title="依据名字判断性别"></a><a href="https://github.com/observerss/ngender" target="_blank" rel="noopener">依据名字判断性别</a></h2><p><font size="3" color="grey">pip install ngender</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ngender</span><br><span class="line"></span><br><span class="line">shenteng = ngender.guess(<span class="string">"沈腾"</span>)</span><br><span class="line">mayun = ngender.guess(<span class="string">"马云"</span>)</span><br><span class="line">fanbingbing = ngender.guess(<span class="string">"范冰冰"</span>)</span><br><span class="line"></span><br><span class="line">print(shenteng, mayun, fanbingbing)</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="gender.jpg" alt title class>                <p></p>            </figure>]]></content>
    
    <summary type="html">
    
      一些实用的 NLP 库
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jieba库的使用</title>
    <link href="https://kernelylz.cn/2019/04/08/jieba/"/>
    <id>https://kernelylz.cn/2019/04/08/jieba/</id>
    <published>2019-04-08T12:48:32.000Z</published>
    <updated>2019-05-06T11:12:47.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jieba库是python中常用的中文分词库"><a href="#jieba库是python中常用的中文分词库" class="headerlink" title="jieba库是python中常用的中文分词库"></a>jieba库是python中常用的中文分词库</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于前缀词典实现高效的词图扫描，生成句子中含字所有可能成词情况所构成的有向无环图<span class="comment">(DAG)</span></span><br><span class="line">采用了动态规划查找最大概率路径，找出基于词频的最大切分组和</span><br><span class="line">对于未登录词，采用了基于汉字成词能力的HMM模型，使用了Viterbi算法求解</span><br></pre></td></tr></table></figure><h3 id="1-分词"><a href="#1-分词" class="headerlink" title="1. 分词"></a>1. 分词</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jieba.cut(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br><span class="line">jieba.lcut(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br><span class="line">jieba.cut_for_search(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><p>  &emsp;str字符串<br>  &emsp;cut_all是否采用全模式（倒序切，粒度细）<br>  &emsp;HMM是否使用HMM模型（设置为True可以发现新词）</p><p>  &emsp;lcut 与 cut 之间的区别是返回的结果==&gt;lcut返回list, cut返回generator<br>  &emsp;cut_for_search 返回值是对长词进行分割，粒度比较细，适用于搜索引擎</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">seg_str = <span class="string">"我来到北京清华大学"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精简模式（精确模式）</span></span><br><span class="line">easy = jieba.lcut(seg_str)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(easy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全模式</span></span><br><span class="line">full = jieba.lcut(seg_str, <span class="attribute">cut_all</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(full))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎模式</span></span><br><span class="line">search = jieba.cut_for_search(seg_str)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(search))</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMM=True，则模型有了发现新词的能力</span></span><br><span class="line">new_seg = <span class="string">"他来到了网易杭研大厦"</span></span><br><span class="line">result = jieba.lcut(new_seg)</span><br><span class="line">HMM_result = jieba.lcut(new_seg, <span class="attribute">HMM</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Normal_cut: "</span> + <span class="string">"/"</span>.join(result))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"HMM_cut: "</span> + <span class="string">"/"</span>.join(result))</span><br></pre></td></tr></table></figure><h3 id="2-添加用户自定义字典"><a href="#2-添加用户自定义字典" class="headerlink" title="2. 添加用户自定义字典"></a>2. 添加用户自定义字典</h3><h4 id="原理很简单-直接上代码"><a href="#原理很简单-直接上代码" class="headerlink" title="原理很简单, 直接上代码"></a>原理很简单, 直接上代码</h4><p>  &emsp;用户字典如:<br>  <figure class="image-box">                <img src="user_dict.png" alt="user_dict图片" title class>                <p>user_dict图片</p>            </figure><br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="title">jieba</span>.load_userdict(<span class="string">"dict/user_dict"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> = [</span></span><br><span class="line">    <span class="string">"世界经济论坛也叫达沃斯论坛"</span>,</span><br><span class="line">    <span class="string">"The World Economic Forum is also called the Davos Forum."</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title">for</span> d <span class="keyword">in</span> <span class="class"><span class="keyword">data</span>:</span></span><br><span class="line">    result = jieba.lcut(d)</span><br><span class="line">    print(<span class="string">","</span>.join(result))</span><br></pre></td></tr></table></figure></p><h3 id="3-关键字提取"><a href="#3-关键字提取" class="headerlink" title="3. 关键字提取"></a>3. 关键字提取</h3><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jieba<span class="selector-class">.analyse</span><span class="selector-class">.extract_tags</span>(sentence, topK=<span class="number">20</span>, withWeight=False, allowPOS=(<span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>))</span><br><span class="line">jieba<span class="selector-class">.analyse</span><span class="selector-class">.textrank</span>(sentence, topK=<span class="number">20</span>, withWeight=False, allowPOS=(<span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>))</span><br></pre></td></tr></table></figure><h4 id="参数详解-1"><a href="#参数详解-1" class="headerlink" title="参数详解"></a>参数详解</h4><p>  &emsp;sentence：待提取的文本<br>  &emsp;topK：返回K个权重最大的关键词<br>  &emsp;withWeight：是否返回权重<br>  &emsp;allowPOS：是否仅包括指定词性的词</p><p>  &emsp;extract_tags 基于 TF-IDF, textrand 基于 TextRank(具体算法可以自行Google)</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import jieba.analyse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键词提取</span></span><br><span class="line">kWords = jieba.analyse.extract_tags(<span class="string">"此外，公司拟对全资子公司吉林欧亚置业有限公司增资4.3亿元，"</span> + </span><br><span class="line">                                    <span class="string">"增资后，吉林欧亚置业注册资本由7000万元增加到5亿元。吉林欧亚"</span> + </span><br><span class="line">                                    <span class="string">"置业主要经营范围为房地产开发及百货零售等业务。目前在建吉林欧"</span> + </span><br><span class="line">                                    <span class="string">"亚城市商业综合体项目。2013年，实现营业收入0万元，实现净利润-139.13万元。"</span>,</span><br><span class="line">                                    <span class="attribute">topK</span>=5, <span class="attribute">withWeight</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word, weight <span class="keyword">in</span> kWords:</span><br><span class="line">    <span class="builtin-name">print</span>(word, <span class="string">":"</span>, weight)</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用方法</span><br><span class="line"><span class="selector-tag">jieba</span><span class="selector-class">.posseg</span><span class="selector-class">.cut</span>(<span class="selector-tag">sentence</span>)</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line">import jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line">src_sentence = <span class="string">"我爱北京天安门"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">words</span> = pseg.cut(src_sentence)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">word</span>, flag <span class="keyword">in</span> <span class="built_in">words</span>:</span><br><span class="line">    print(<span class="string">"%s %s"</span> % (<span class="built_in">word</span>, flag))</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="cixingbiaozhu.png" alt="词性标注结果图" title class>                <p>词性标注结果图</p>            </figure><h4 id="并行分词"><a href="#并行分词" class="headerlink" title="并行分词"></a>并行分词</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法：</span></span><br><span class="line">  <span class="keyword">jieba.enable_parallel(4) </span><span class="comment"># 开启并行模式，参数为并行进程数</span></span><br><span class="line">  <span class="keyword">jieba.disable_parallel() </span><span class="comment"># 关闭并行分词模式</span></span><br></pre></td></tr></table></figure><p>&emsp;原理： 文本按行分割后，分配到多个Python进程并行分词，最后归并结果。<br>&emsp;效果： 在4核3.4GHzLinux机器上，对金庸全集进行精确分词，获得了1MB/s的速度，是单进程版的3.3倍。<br>&emsp;注意： 并行分词仅支持默认分词器jieba.dt和jieba.posseg.dt。目前不支持Windows</p><h4 id="返回词语在原文的起始位置"><a href="#返回词语在原文的起始位置" class="headerlink" title="返回词语在原文的起始位置"></a>返回词语在原文的起始位置</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">result = jieba.tokenize(<span class="string">"永和服装饰品有限公司"</span>)</span><br><span class="line"><span class="keyword">for</span> tk in result:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"word %s\t\t start: %d \t\t end: %d"</span> % (tk[<span class="number">0</span>], tk[<span class="number">1</span>], tk[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="last.png" alt="并行分词结果图" title class>                <p>并行分词结果图</p>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jieba库是python中常用的中文分词库&quot;&gt;&lt;a href=&quot;#jieba库是python中常用的中文分词库&quot; class=&quot;headerlink&quot; title=&quot;jieba库是python中常用的中文分词库&quot;&gt;&lt;/a&gt;jieba库是python中常用的中文分
      
    
    </summary>
    
      <category term="python" scheme="https://kernelylz.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://kernelylz.cn/tags/python/"/>
    
      <category term="jieba" scheme="https://kernelylz.cn/tags/jieba/"/>
    
      <category term="自动分词" scheme="https://kernelylz.cn/tags/%E8%87%AA%E5%8A%A8%E5%88%86%E8%AF%8D/"/>
    
      <category term="自然语言处理" scheme="https://kernelylz.cn/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PySpider安装中的问题(mac)</title>
    <link href="https://kernelylz.cn/2019/04/07/PySpider/"/>
    <id>https://kernelylz.cn/2019/04/07/PySpider/</id>
    <published>2019-04-07T07:57:50.000Z</published>
    <updated>2019-04-07T09:36:53.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><h3 id="emsp-nbsp-mac-打开-Shell"><a href="#emsp-nbsp-mac-打开-Shell" class="headerlink" title="&emsp;&nbsp;  mac 打开 Shell"></a>&emsp;&nbsp;  mac 打开 Shell</h3><h3 id="emsp-nbsp-pip-install-pyspider"><a href="#emsp-nbsp-pip-install-pyspider" class="headerlink" title="&emsp;&nbsp;  pip install pyspider"></a>&emsp;&nbsp;  pip install pyspider</h3><h2 id="使用过程："><a href="#使用过程：" class="headerlink" title="使用过程："></a>使用过程：</h2><h3 id="emsp-nbsp-打开mac的terminal界面"><a href="#emsp-nbsp-打开mac的terminal界面" class="headerlink" title="&emsp;&nbsp;  打开mac的terminal界面"></a>&emsp;&nbsp;  打开mac的terminal界面</h3><h3 id="emsp-nbsp-在终端界面-输入"><a href="#emsp-nbsp-在终端界面-输入" class="headerlink" title="&emsp;&nbsp;  在终端界面, 输入"></a>&emsp;&nbsp;  在终端界面, 输入</h3><p>&emsp;&emsp;<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider <span class="keyword">all</span></span><br></pre></td></tr></table></figure></p><h4 id="emsp-nbsp-问题1："><a href="#emsp-nbsp-问题1：" class="headerlink" title="&emsp;&nbsp; 问题1："></a>&emsp;&nbsp; 问题1：</h4><p>&emsp;&emsp;&nbsp; ImportError: pycurl: libcurl link-time ssl backend is different from compile-time ssl backend </p><p>&emsp;&emsp;&nbsp; 这种情况是mac独有的（pycurl与libcurl版本冲突）  </p><p>&emsp;&emsp;&nbsp; 根据第一个括号中内容的不同:  </p><p>&emsp;&emsp;&emsp; nss：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pycurl </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYCURL_SSL_LIBRARY</span>=nss</span><br><span class="line">pip install pycurl</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp; openssl：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pycurl </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYCURL_SSL_LIBRARY</span>=openssl</span><br><span class="line">pip install pycurl</span><br></pre></td></tr></table></figure><h4 id="emsp-nbsp-问题2："><a href="#emsp-nbsp-问题2：" class="headerlink" title="&emsp;&nbsp; 问题2："></a>&emsp;&nbsp; 问题2：</h4><p>&emsp;&emsp;&nbsp; Could not create web server listening on port xxx</p><p>&emsp;&emsp;&nbsp; 这种情况在shell中直接输入lsof -i:xxx 查看xxx端口是否已经被使用</p><pre><code>若显示出类似:     COMMAND   PID    USER     FD   TYPE  DEVICE SIZE/OFF    ---   phantomjs  815  thekernel  12u  IPv4 0xa481aab9e34a6609  ---</code></pre><p>&emsp;&emsp;&nbsp; 在终端输入:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-9</span> <span class="number">815</span>(自己对应的PID)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装过程：&quot;&gt;&lt;a href=&quot;#安装过程：&quot; class=&quot;headerlink&quot; title=&quot;安装过程：&quot;&gt;&lt;/a&gt;安装过程：&lt;/h2&gt;&lt;h3 id=&quot;emsp-nbsp-mac-打开-Shell&quot;&gt;&lt;a href=&quot;#emsp-nbsp-mac-打开-Sh
      
    
    </summary>
    
      <category term="python" scheme="https://kernelylz.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://kernelylz.cn/tags/python/"/>
    
      <category term="爬虫" scheme="https://kernelylz.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="pyspider" scheme="https://kernelylz.cn/tags/pyspider/"/>
    
      <category term="mac" scheme="https://kernelylz.cn/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kernelylz.cn/2019/04/06/hello-world/"/>
    <id>https://kernelylz.cn/2019/04/06/hello-world/</id>
    <published>2019-04-06T14:52:27.458Z</published>
    <updated>2019-04-06T14:52:27.458Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
