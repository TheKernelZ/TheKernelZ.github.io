<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hadoop环境搭建]]></title>
      <url>/2019/08/27/Hadoop%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="大数据入门-分布式架构Hadoop环境搭建"><a href="#大数据入门-分布式架构Hadoop环境搭建" class="headerlink" title="大数据入门(分布式架构Hadoop环境搭建)"></a>大数据入门(分布式架构Hadoop环境搭建)</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统: <span class="selector-tag">CentOS</span> 7 64位</span><br><span class="line"><span class="selector-tag">JDK</span>版本: <span class="selector-tag">jdk-8u212-linux-x64</span></span><br><span class="line"><span class="selector-tag">Hadoop</span>版本: <span class="selector-tag">hadoop-2</span><span class="selector-class">.6</span><span class="selector-class">.0-cdh5</span><span class="selector-class">.15</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure>

<h3 id="系统基础环境搭建"><a href="#系统基础环境搭建" class="headerlink" title="系统基础环境搭建"></a>系统基础环境搭建</h3><p>保证虚拟机能联网(尝试ping 主机或<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p>
<h4 id="安装JDK-已安装的直接下一步"><a href="#安装JDK-已安装的直接下一步" class="headerlink" title="安装JDK(已安装的直接下一步)"></a>安装JDK(已安装的直接下一步)</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载OpenJDK(CentOS 7 默认安装了 openJDK，通过 java -version可以测试一下)</span></span><br><span class="line">yum -y remove java</span><br><span class="line"><span class="comment"># 这里我发现 jdk8 好像必须要登录才能下载了, 在这个仓库中可以免费下载</span></span><br><span class="line">http:<span class="string">//www.github.com/frekele/oracle-java/releases</span></span><br><span class="line"><span class="comment"># 将 jdk 移动到虚拟机中(mac/linux, win中可以直接使用vmtools拉入)</span></span><br><span class="line">scp jdk文件 CentOS用户名@虚拟机ip地址:需要移动到的路径</span><br><span class="line">例如: scp jdk-8u212-linux-x64.tar.gz thekernel@192.168.110.140:~<span class="string">/my_hadoop</span> </span><br><span class="line"><span class="comment"># 解压 jdk 文件(-C 用于指定解压到的目录)</span></span><br><span class="line">tar -zxvf jdk-8u212-linux-x64.tar.gz -C <span class="string">/home/hadoop/app</span></span><br><span class="line"><span class="comment"># 添加环境变量 </span></span><br><span class="line">vim ~<span class="string">/.bash_profile</span></span><br><span class="line">在export $PATH前加入<span class="params">----------------------------------------------------------</span></span><br><span class="line">	export JAVA_HOME=<span class="string">/home/hadoop/app/jdk1.8.0_212</span></span><br><span class="line">	export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="params">--------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="bash_profile.png" alt="bash_profile图片" title class>
                <p>bash_profile图片</p>
            </figure>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 更新系统环境变量</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta"># 测试 jdk(注意看第二行后面显示的，我这里是212)</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="java-version.png" alt="java_version图片" title class>
                <p>java_version图片</p>
            </figure>

<h4 id="设置-ssh-无密码登录-以后在主从服务器调用时非常重要"><a href="#设置-ssh-无密码登录-以后在主从服务器调用时非常重要" class="headerlink" title="设置 ssh 无密码登录(以后在主从服务器调用时非常重要)"></a>设置 ssh 无密码登录(以后在主从服务器调用时非常重要)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 ssh</span></span><br><span class="line">首先通过 ssh 用户名@ip地址 进行测试(这时是需要输入密码的)</span><br><span class="line">在~目录下运行 ssh-keygen -t rsa (选项全部默认回车)</span><br><span class="line"><span class="comment"># 看到 .ssh文件加下有 id_rsa, id_rsa.pub 则成功</span></span><br><span class="line">cat id_rsa.pub <span class="meta">&gt;&gt; </span>authorized_keys</span><br><span class="line"><span class="comment"># 建议将 authorized_keys 目录的权限修改为只能当前用户读写</span></span><br><span class="line">chmod <span class="number">600</span> authorized_keys</span><br><span class="line"><span class="comment"># 再次测试 ssh</span></span><br><span class="line">ssh 用户名@ip地址(这时是不需要输入密码的)</span><br></pre></td></tr></table></figure>

<h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 解压 hadoop 文件</span><br><span class="line">tar -zxvf hadoop<span class="number">-2.6</span><span class="number">.0</span>-cdh5<span class="number">.15</span><span class="number">.1</span>.tar.gz -C /home/hadoop/app</span><br><span class="line"># 配置 hadoop-envs</span><br><span class="line">cd /home/hadoop/app/hadoop<span class="number">-2.6</span><span class="number">.0</span>-cdh5<span class="number">.15</span><span class="number">.1</span>/etc/hadoop</span><br><span class="line">vim hadoop-envs.sh</span><br><span class="line"># 将其中的 JAVA_HOME改为自己的java路径(保险起见)</span><br></pre></td></tr></table></figure>

<h4 id="配置Hadoop及HDFS"><a href="#配置Hadoop及HDFS" class="headerlink" title="配置Hadoop及HDFS"></a>配置Hadoop及HDFS</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 在hadoop目录下执行(hadoop-2.6.0-cdh5.15.1)</span></span><br><span class="line"><span class="meta"># 配置 Hadoop</span></span><br><span class="line">vim etc<span class="meta-keyword">/hadoop/</span>core-site.xml</span><br><span class="line">在configuration标签中加入----------------------------------</span><br><span class="line">	<span class="params">&lt;property&gt;</span></span><br><span class="line">	    <span class="params">&lt;name&gt;</span>fs.defaultFS<span class="params">&lt;/name&gt;</span></span><br><span class="line">	    <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//localhost:8020&lt;/value&gt;</span></span><br><span class="line">	<span class="params">&lt;/property&gt;</span></span><br><span class="line">	<span class="params">&lt;property&gt;</span></span><br><span class="line">	    <span class="params">&lt;name&gt;</span>hadoop.tmp.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">	    <span class="params">&lt;value&gt;</span><span class="meta-keyword">/home/</span>hadoop<span class="meta-keyword">/app/</span>tmp<span class="params">&lt;/value&gt;</span>  <span class="meta"># 文件夹目录可以自行更改</span></span><br><span class="line">	<span class="params">&lt;/property&gt;</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="meta"># 配置 HDFS</span></span><br><span class="line">vim etc<span class="meta-keyword">/hadoop/</span>hdfs-site.xml</span><br><span class="line">在configuration标签中加入----------------------------------</span><br><span class="line">	<span class="params">&lt;property&gt;</span></span><br><span class="line">	    <span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line">	    <span class="params">&lt;value&gt;</span><span class="number">1</span><span class="params">&lt;/value&gt;</span></span><br><span class="line">	<span class="params">&lt;/property&gt;</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="meta"># 首次启动 HDFS (第一次必须format namenode)</span></span><br><span class="line">hdfs namenode -format</span><br><span class="line"><span class="meta"># 在 INFO 中会看到 successfuilly formatted 表明成功</span></span><br><span class="line"><span class="meta"># 若失败，在提示中会有明显的错误(一般是xml粗心写错)</span></span><br></pre></td></tr></table></figure>

<h4 id="查看-HDFS"><a href="#查看-HDFS" class="headerlink" title="查看 HDFS"></a>查看 HDFS</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通过 jps 命令查看 Jps 是否启动</span><br><span class="line"><span class="meta"># 通过主机或其他同网段的机器访问</span></span><br><span class="line">网页访问 ip:<span class="number">50070</span></span><br><span class="line"><span class="meta"># 不能访问一般是防火墙问题</span></span><br><span class="line"><span class="meta"># 查看防火墙状态(root下)</span></span><br><span class="line">firewall-cmd --state 	</span><br><span class="line">出现 `running` 则表明是防火墙问题</span><br><span class="line"><span class="meta"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">此时访问 ip:<span class="number">50070</span> 即可看到如下情景</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="HDFS.png" alt="HDSF图片" title class>
                <p>HDSF图片</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nessus 入门]]></title>
      <url>/2019/07/19/Nessus%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="Nessus是世界上最流行的漏洞扫描工具"><a href="#Nessus是世界上最流行的漏洞扫描工具" class="headerlink" title="Nessus是世界上最流行的漏洞扫描工具"></a>Nessus是世界上最流行的漏洞扫描工具</h2><h3 id="1-预备知识与下载"><a href="#1-预备知识与下载" class="headerlink" title="1. 预备知识与下载"></a>1. 预备知识与下载</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Nessus 分为 Home Professional Manager Cloud四种</span><br><span class="line">其中 Home 为免费版</span><br><span class="line">https:<span class="regexp">//</span>www.tenable.com<span class="regexp">/downloads/</span>nessus（建议科学下载）</span><br><span class="line">根据需要下载不同版本的Nessus（本文基于 Kali <span class="number">19.02</span>x64 版）</span><br></pre></td></tr></table></figure>

<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件: Nessus-<span class="number">8.5</span>.<span class="number">1</span>-debian6_amd64.deb</span><br><span class="line">使用 dpkg -<span class="selector-tag">i</span> Nessus-<span class="number">8.5</span>.<span class="number">1</span>-debian6_amd64<span class="selector-class">.deb</span> 进行安装</span><br><span class="line">（过程中有 https:<span class="comment">//kali:8834出现则表示安装成功）</span></span><br></pre></td></tr></table></figure>

<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启: <span class="regexp">/etc/</span>init.d/nessusd start</span><br><span class="line">通过浏览器访问: <span class="string">https:</span><span class="comment">//kali:8834</span></span><br><span class="line">（强烈建议使用 Chrome/Chromium 不建议使用 FireFox）</span><br><span class="line">刚进去会 Initializing 比较长时间</span><br></pre></td></tr></table></figure>

<h4 id="Tips-过程中遇到无法打开-Chrome-的问题"><a href="#Tips-过程中遇到无法打开-Chrome-的问题" class="headerlink" title="Tips: 过程中遇到无法打开 Chrome 的问题"></a>Tips: 过程中遇到无法打开 Chrome 的问题</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改 /opt/google/chrome 下的 google-chrome 配置文件</span><br><span class="line">在末行加入: --user-data-dir $HOME</span><br><span class="line">root用户: 还需要加上 --<span class="keyword">no</span>-sandbox</span><br><span class="line">最终: <span class="keyword">exec</span> -a <span class="string">"$0"</span> <span class="string">"$HERE/chrome"</span> <span class="string">"$@"</span> --user-data-dir $HOME --<span class="keyword">no</span>-sandbox</span><br></pre></td></tr></table></figure>

<h3 id="4-基本页面"><a href="#4-基本页面" class="headerlink" title="4. 基本页面"></a>4. 基本页面</h3><h4 id="基础页面"><a href="#基础页面" class="headerlink" title="基础页面"></a>基础页面</h4><figure class="image-box">
                <img src="NessusEssentials.png" alt="Nessus基本页面" title class>
                <p>Nessus基本页面</p>
            </figure>
<h4 id="New-Scan"><a href="#New-Scan" class="headerlink" title="New Scan"></a>New Scan</h4><figure class="image-box">
                <img src="NewScan.png" alt="NewScan页面" title class>
                <p>NewScan页面</p>
            </figure>
<h4 id="Basic-Network-Scan-入门方法"><a href="#Basic-Network-Scan-入门方法" class="headerlink" title="Basic Network Scan(入门方法)"></a>Basic Network Scan(入门方法)</h4><figure class="image-box">
                <img src="BasicNetworkScan.png" alt="BasicNetworkScan页面" title class>
                <p>BasicNetworkScan页面</p>
            </figure>

<h3 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5. 基本使用"></a>5. 基本使用</h3><pre><code>在添加的 NewScan 中可以点击 运行 按钮进行漏洞扫描与分析
点击之后在 History 中有运行记录，Vulnerabilities 为扫描到的漏洞</code></pre><figure class="image-box">
                <img src="Vulnerabilities.png" alt="Vulnerabilities" title class>
                <p>Vulnerabilities</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> NetworkAttackDefense </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 漏洞扫描 </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx+uwsgi+Flask搭建后台系统(Ubuntu)]]></title>
      <url>/2019/06/22/NginxUwsgiFlask/</url>
      <content type="html"><![CDATA[<h2 id="利用-Nginx-反向代理-负载均衡-运行-Flask网站"><a href="#利用-Nginx-反向代理-负载均衡-运行-Flask网站" class="headerlink" title="利用 Nginx 反向代理+负载均衡 运行 Flask网站"></a>利用 Nginx 反向代理+负载均衡 运行 Flask网站</h2><h3 id="1-安装pip3"><a href="#1-安装pip3" class="headerlink" title="1. 安装pip3"></a>1. 安装pip3</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu16.04及以上默认安装Python3，但是没有pip3</span></span><br><span class="line">sudo apt <span class="keyword">install</span> python3-pip</span><br></pre></td></tr></table></figure>

<h3 id="2-安装Flask与uwsgi"><a href="#2-安装Flask与uwsgi" class="headerlink" title="2.安装Flask与uwsgi"></a>2.安装Flask与uwsgi</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask  # 安装完可以在PythonConsole中使用<span class="keyword">from</span> flask <span class="keyword">import</span> Flask进行测试</span><br><span class="line">pip3 install uwsgi  # Nginx 需要使用 uwsgi 托管 Python</span><br></pre></td></tr></table></figure>

<h3 id="3-Nginx安装与运行"><a href="#3-Nginx安装与运行" class="headerlink" title="3.Nginx安装与运行"></a>3.Nginx安装与运行</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> nginx  <span class="comment"># 安装</span></span><br><span class="line">sudo /etc/init.d/nginx <span class="keyword">start</span>  <span class="comment"># 运行</span></span><br></pre></td></tr></table></figure>

<h3 id="4-安装virtualenv-可以跳过，建议不跳"><a href="#4-安装virtualenv-可以跳过，建议不跳" class="headerlink" title="4.安装virtualenv(可以跳过，建议不跳)"></a>4.安装virtualenv(可以跳过，建议不跳)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟环境可以隔离不同的Python运行环境(每个项目有自己的依赖环境，避免冲突)</span></span><br><span class="line">pip3 <span class="keyword">install</span> virtualenv</span><br><span class="line">cd /<span class="keyword">var</span>/www/<span class="keyword">test</span>  <span class="comment"># 在此目录下进行测试(可以改为自己的目录)</span></span><br><span class="line">virtualenv venv  <span class="comment"># 创建虚拟环境</span></span><br><span class="line"><span class="keyword">source</span> venv/<span class="keyword">bin</span>/<span class="keyword">activate</span>  <span class="comment"># 运行虚拟环境(通过 deactivate 可以退出虚拟环境)</span></span><br><span class="line"><span class="comment"># 命令行前有了(venv)则表示运行成功</span></span><br></pre></td></tr></table></figure>

<h3 id="5-测试代码-Flask入门程序"><a href="#5-测试代码-Flask入门程序" class="headerlink" title="5.测试代码(Flask入门程序)"></a>5.测试代码(Flask入门程序)</h3><p><code>cd /var/www/test</code><br><code>vim hello.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br><span class="line"><span class="comment"># 可以通过 python3 hello.py 进行测试</span></span><br><span class="line"><span class="comment"># 访问http://localhost:5000</span></span><br></pre></td></tr></table></figure>

<h3 id="6-配置Nginx-重点"><a href="#6-配置Nginx-重点" class="headerlink" title="6.配置Nginx(重点!!!)"></a>6.配置Nginx(重点!!!)</h3><h4 id="删除Nginx的默认配置文件"><a href="#删除Nginx的默认配置文件" class="headerlink" title="删除Nginx的默认配置文件"></a>删除Nginx的默认配置文件</h4><p><code>sudo rm /etc/nginx/sites-enabled/default</code></p>
<h4 id="创建项目的配置文件"><a href="#创建项目的配置文件" class="headerlink" title="创建项目的配置文件"></a>创建项目的配置文件</h4><p><code>vim /etc/nginx/sites-enabled/test_nginx.conf</code> </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">charset</span>     utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">include</span> uwsgi_params;</span><br><span class="line">	<span class="attribute">uwsgi_pass</span> unix:/var/www/test/test_uwsgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链接配置文件到-Nginx-配置文件夹并重启-Nginx"><a href="#链接配置文件到-Nginx-配置文件夹并重启-Nginx" class="headerlink" title="链接配置文件到 Nginx 配置文件夹并重启 Nginx"></a>链接配置文件到 Nginx 配置文件夹并重启 Nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>test_nginx.conf <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span></span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx restart</span></span><br></pre></td></tr></table></figure>

<h3 id="7-配置uwsgi-重点-1"><a href="#7-配置uwsgi-重点-1" class="headerlink" title="7.配置uwsgi(重点+1)"></a>7.配置uwsgi(重点+1)</h3><h4 id="创建-uwsgi-配置文件-文件内容如下"><a href="#创建-uwsgi-配置文件-文件内容如下" class="headerlink" title="创建 uwsgi 配置文件(文件内容如下)"></a>创建 uwsgi 配置文件(文件内容如下)</h4><p><code>vim /var/www/test/test_uwsgi.conf</code></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment">#application's base folder</span></span><br><span class="line"><span class="attr">base</span> = /var/www/test</span><br><span class="line"><span class="comment">#python module to import</span></span><br><span class="line"><span class="attr">app</span> = hello</span><br><span class="line"><span class="attr">module</span> = %(app)</span><br><span class="line"><span class="attr">home</span> = %(base)/venv</span><br><span class="line"><span class="attr">pythonpath</span> = %(base)</span><br><span class="line"><span class="comment">#socket file's location</span></span><br><span class="line"><span class="attr">socket</span> = /var/www/test/%n.sock</span><br><span class="line"><span class="comment">#permissions for the socket file</span></span><br><span class="line"><span class="attr">chmod-socket</span> = <span class="number">666</span></span><br><span class="line"><span class="comment">#the variable that holds a flask application inside the module imported at line #6</span></span><br><span class="line"><span class="attr">callable</span> = app</span><br><span class="line"><span class="comment">#location of log files</span></span><br><span class="line"><span class="attr">logto</span> = /var/log/uwsgi/%n.log</span><br></pre></td></tr></table></figure>

<h4 id="创建-Log-日志文件"><a href="#创建-Log-日志文件" class="headerlink" title="创建 Log 日志文件"></a>创建 Log 日志文件</h4><p><code>sudo mkdir -p /var/log/uwsgi</code></p>
<h4 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h4><p><code>uwsgi --ini website_uwsgi.ini</code></p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以直接在公网上进行访问</span><br><span class="line">端口号改为了<span class="number">80</span>(test_nginx.conf下的<span class="section">listen</span>)</span><br></pre></td></tr></table></figure>

<h2 id="以下为额外内容"><a href="#以下为额外内容" class="headerlink" title="以下为额外内容"></a>以下为额外内容</h2><h3 id="8-配置supervisor-进程管理"><a href="#8-配置supervisor-进程管理" class="headerlink" title="8.配置supervisor(进程管理)"></a>8.配置supervisor(进程管理)</h3><p>用于进程卡死后自动重启，防止后台进程卡死后数据丢失等</p>
<h4 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install supervisor(pip3不推荐啊)</span><br><span class="line"># 创建<span class="keyword">Log</span>文件</span><br><span class="line">touch /<span class="keyword">var</span>/<span class="keyword">log</span>/supervisor/testLogs/test_supervisor.<span class="built_in">log</span></span><br><span class="line">touch /<span class="keyword">var</span>/<span class="keyword">log</span>/supervisor/testLogs/test_supervisor_err.<span class="built_in">log</span></span><br><span class="line"># 创建配置文件</span><br><span class="line">touch /etc/supervisor/<span class="keyword">conf</span>.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span>(内容如下)</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:test]</span></span><br><span class="line"><span class="attr">command</span>=uwsgi --ini /var/www/test/test_uwsgi.ini                               </span><br><span class="line"><span class="attr">stopsignal</span>=QUIT</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span>                                                                        </span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span>                                                                       </span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/supervisor/testLogs/test_supervisor.log                 </span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/supervisor/testLogs/test_supervisor_err.log</span><br></pre></td></tr></table></figure>

<h4 id="2-运行supervisor监控进程"><a href="#2-运行supervisor监控进程" class="headerlink" title="2.运行supervisor监控进程"></a>2.运行supervisor监控进程</h4><p><code>cd /etc/supervisor</code><br><code>sudo supervisord -c supervisord.conf</code><br>如果遇到: <code>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord</code><br>执行: <code>sudo unlink /var/run/supervisor.sock</code><br>运行: <code>supervisorctl -c supervisord.conf reload</code></p>
<h4 id="3-supervisor使用方法"><a href="#3-supervisor使用方法" class="headerlink" title="3.supervisor使用方法"></a>3.supervisor使用方法</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># program_name即在test.conf第一行的名字</span></span><br><span class="line">supervisorctl status  <span class="comment"># 查看状态</span></span><br><span class="line">supervisorctl <span class="literal">stop</span> program_name  <span class="comment"># 停止</span></span><br><span class="line">supervisorctl <span class="literal">start</span>  program_name  <span class="comment"># 开始</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> Flask </tag>
            
            <tag> uwsgi </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitLab详细搭建过程(rpm)]]></title>
      <url>/2019/06/21/GitLab/</url>
      <content type="html"><![CDATA[<h2 id="GitLab本质上就是-自己的GitHub-这篇文章是以简单的rpm方式进行安装"><a href="#GitLab本质上就是-自己的GitHub-这篇文章是以简单的rpm方式进行安装" class="headerlink" title="GitLab本质上就是 自己的GitHub(这篇文章是以简单的rpm方式进行安装)"></a>GitLab本质上就是 自己的GitHub(这篇文章是以简单的rpm方式进行安装)</h2><h3 id="搭建依赖环境"><a href="#搭建依赖环境" class="headerlink" title="搭建依赖环境"></a>搭建依赖环境</h3><h4 id="打开-SSH-客户端-用于远程"><a href="#打开-SSH-客户端-用于远程" class="headerlink" title="打开 SSH 客户端(用于远程)"></a>打开 SSH 客户端(用于远程)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> curl policycoreutils openssh-<span class="keyword">server</span> openssh-clients</span><br><span class="line">sudo systemctl <span class="keyword">enable</span> sshd</span><br><span class="line">sudo systemctl <span class="keyword">start</span> sshd</span><br></pre></td></tr></table></figure>

<h4 id="打开-postfix-用于发送通知邮件"><a href="#打开-postfix-用于发送通知邮件" class="headerlink" title="打开 postfix(用于发送通知邮件)"></a>打开 postfix(用于发送通知邮件)</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install <span class="built_in">postfix</span>  </span><br><span class="line"># 上述命令如果遇到了pid被锁定，一般是已经安装<span class="built_in">postfix</span>，当然也可以使用<span class="built_in">kill</span> -<span class="number">9</span> PID来关闭</span><br><span class="line">sudo systemctl enable <span class="built_in">postfix</span></span><br><span class="line">sudo systemctl start <span class="built_in">postfix</span></span><br></pre></td></tr></table></figure>

<h4 id="打开防火墙的HTTP和SSH访问控制"><a href="#打开防火墙的HTTP和SSH访问控制" class="headerlink" title="打开防火墙的HTTP和SSH访问控制"></a>打开防火墙的HTTP和SSH访问控制</h4><p>#####(CentOS默认已安装，没有安装的可以输入: yum install firewalld systemd -y)</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service firewalld  start</span><br><span class="line">sudo firewall-cmd <span class="params">--permanent</span> <span class="params">--add-service=http</span></span><br><span class="line">sudo systemctl <span class="keyword">reload</span> firewalld</span><br></pre></td></tr></table></figure>

<h3 id="搭建GitLab-重头戏来了"><a href="#搭建GitLab-重头戏来了" class="headerlink" title="搭建GitLab(重头戏来了)"></a>搭建GitLab(重头戏来了)</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -<span class="keyword">y</span> install wget  # 已安装的略过</span><br><span class="line">sudo yum -<span class="keyword">y</span> install <span class="keyword">vim</span>  # 同上</span><br><span class="line">wget http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/gitlab-<span class="keyword">ce</span>/yum/el7/gitlab-<span class="keyword">ce</span>-<span class="number">11.9</span>.<span class="number">11</span>-<span class="keyword">ce</span>.<span class="number">0</span>.el7.x86_64.rpm  # 下载gitlab的rpm文件</span><br><span class="line">sudo rpm -i gitlab-<span class="keyword">ce</span>-<span class="number">10.0</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span>.el7.x86_64.rpm  # 安装gitlab(有警告直接省略)</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="1.png" alt="GitLab安装成功图片" title class>
                <p>GitLab安装成功图片</p>
            </figure>

<h3 id="配置GitLab-域名与端口"><a href="#配置GitLab-域名与端口" class="headerlink" title="配置GitLab(域名与端口)"></a>配置GitLab(域名与端口)</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># GitLab默认端口是8080(与Tomcat等冲突，不需要使用8080端口的可以直接跳过)</span></span><br><span class="line">sudo vim <span class="meta-keyword">/etc/</span>gitlab/gitlab.rb  <span class="meta"># 如果不是sudo会出现内容为空的情况</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="2.png" alt="gitlab.rb文件内容" title class>
                <p>gitlab.rb文件内容</p>
            </figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引号内改为类似: http:<span class="comment">//localhost:9000(非必须)</span></span><br><span class="line">ESC -&gt; :wq 保存退出</span><br></pre></td></tr></table></figure>

<h3 id="启动GitLab"><a href="#启动GitLab" class="headerlink" title="启动GitLab"></a>启动GitLab</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> gitlab-ctl reconfigure  <span class="comment"># 这个过程有点长，一般会停滞在action run，耐心等待即可</span></span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"><span class="comment"># ok:run 代表运行成功!</span></span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="3.png" alt="gitlab启动成功图片" title class>
                <p>gitlab启动成功图片</p>
            </figure>

<h3 id="使用GitLab"><a href="#使用GitLab" class="headerlink" title="使用GitLab"></a>使用GitLab</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Tips1:</span> 使用当时配置的域名以及端口</span><br><span class="line"><span class="symbol">Tips2:</span> 初始登录需要修改密码(账号默认为root)</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> centos7 </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NLPlibs]]></title>
      <url>/2019/04/29/NLPlibs/</url>
      <content type="html"><![CDATA[<h2 id="中英文敏感词过滤"><a href="#中英文敏感词过滤" class="headerlink" title="中英文敏感词过滤"></a><a href="https://github.com/observerss/textfilter" target="_blank" rel="noopener">中英文敏感词过滤</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f = DFAFilter()</span><br><span class="line">&gt;&gt;&gt;f.add(<span class="string">"sexy"</span>)</span><br><span class="line">&gt;&gt;&gt;f.filter(<span class="string">"hello sexy bavby"</span>)</span><br><span class="line">hello **** baby</span><br></pre></td></tr></table></figure>

<h2 id="两种语言检测"><a href="#两种语言检测" class="headerlink" title="两种语言检测"></a>两种语言检测</h2><h3 id="Langid"><a href="#Langid" class="headerlink" title="Langid"></a><a href="https://github.com/saffsd/langid.py" target="_blank" rel="noopener">Langid</a></h3><p><font size="3" color="grey">pip install langid</font>(准确率高，效率低)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> langid</span><br><span class="line">&gt;&gt;&gt;langid.classify(<span class="string">"This is a test"</span>)</span><br><span class="line">(<span class="string">'en'</span>, <span class="number">-54.41310358047485</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Langdetect"><a href="#Langdetect" class="headerlink" title="Langdetect"></a><a href="https://code.google.com/archive/p/language-detection/" target="_blank" rel="noopener">Langdetect</a></h3><p><font size="3" color="grey">pip install langdetect</font>(准确率低，效率高)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect</span><br><span class="line"><span class="keyword">from</span> langdetect <span class="keyword">import</span> detect_langs</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"本篇博客主要介绍两款语言探测工具，用于区分文本到底是什么语言，"</span></span><br><span class="line">s2 = <span class="string">'We are pleased to introduce today a new technology'</span></span><br><span class="line"></span><br><span class="line">print(detect(s1))</span><br><span class="line">print(detect(s2))</span><br><span class="line">print(detect_langs(s3))    <span class="comment"># 输出探测出的所有语言类型及其所占的比例</span></span><br></pre></td></tr></table></figure>

<h2 id="手机归属地查询"><a href="#手机归属地查询" class="headerlink" title="手机归属地查询"></a><a href="https://github.com/ls0f/phone" target="_blank" rel="noopener">手机归属地查询</a></h2><p><font size="3" color="grey">pip install phone</font>(支持号段: 13 ,15 ,18 ,14[5,7],17[0,6,7,8])</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phone <span class="keyword">import</span> Phone</span><br><span class="line"></span><br><span class="line">p  = Phone()</span><br><span class="line">result = p.find(<span class="number">17342019665</span>)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="phone.jpg" alt title class>
                <p></p>
            </figure>

<h2 id="依据名字判断性别"><a href="#依据名字判断性别" class="headerlink" title="依据名字判断性别"></a><a href="https://github.com/observerss/ngender" target="_blank" rel="noopener">依据名字判断性别</a></h2><p><font size="3" color="grey">pip install ngender</font></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ngender</span><br><span class="line"></span><br><span class="line">shenteng = ngender.guess(<span class="string">"沈腾"</span>)</span><br><span class="line">mayun = ngender.guess(<span class="string">"马云"</span>)</span><br><span class="line">fanbingbing = ngender.guess(<span class="string">"范冰冰"</span>)</span><br><span class="line"></span><br><span class="line">print(shenteng, mayun, fanbingbing)</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="gender.jpg" alt title class>
                <p></p>
            </figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[jieba库的使用]]></title>
      <url>/2019/04/08/jieba/</url>
      <content type="html"><![CDATA[<h2 id="jieba库是python中常用的中文分词库"><a href="#jieba库是python中常用的中文分词库" class="headerlink" title="jieba库是python中常用的中文分词库"></a>jieba库是python中常用的中文分词库</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于前缀词典实现高效的词图扫描，生成句子中含字所有可能成词情况所构成的有向无环图<span class="comment">(DAG)</span></span><br><span class="line">采用了动态规划查找最大概率路径，找出基于词频的最大切分组和</span><br><span class="line">对于未登录词，采用了基于汉字成词能力的HMM模型，使用了Viterbi算法求解</span><br></pre></td></tr></table></figure>

<h3 id="1-分词"><a href="#1-分词" class="headerlink" title="1. 分词"></a>1. 分词</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jieba.cut(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br><span class="line">jieba.lcut(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br><span class="line">jieba.cut_for_search(<span class="attribute">str</span>=<span class="string">''</span>, <span class="attribute">cut_all</span>=<span class="literal">False</span>, <span class="attribute">HMM</span>=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><p>  &emsp;str字符串<br>  &emsp;cut_all是否采用全模式（倒序切，粒度细）<br>  &emsp;HMM是否使用HMM模型（设置为True可以发现新词）</p>
<p>  &emsp;lcut 与 cut 之间的区别是返回的结果==&gt;lcut返回list, cut返回generator<br>  &emsp;cut_for_search 返回值是对长词进行分割，粒度比较细，适用于搜索引擎</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">seg_str = <span class="string">"我来到北京清华大学"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精简模式（精确模式）</span></span><br><span class="line">easy = jieba.lcut(seg_str)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(easy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全模式</span></span><br><span class="line">full = jieba.lcut(seg_str, <span class="attribute">cut_all</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(full))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎模式</span></span><br><span class="line">search = jieba.cut_for_search(seg_str)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"/"</span>.join(search))</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMM=True，则模型有了发现新词的能力</span></span><br><span class="line">new_seg = <span class="string">"他来到了网易杭研大厦"</span></span><br><span class="line">result = jieba.lcut(new_seg)</span><br><span class="line">HMM_result = jieba.lcut(new_seg, <span class="attribute">HMM</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Normal_cut: "</span> + <span class="string">"/"</span>.join(result))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"HMM_cut: "</span> + <span class="string">"/"</span>.join(result))</span><br></pre></td></tr></table></figure>

<h3 id="2-添加用户自定义字典"><a href="#2-添加用户自定义字典" class="headerlink" title="2. 添加用户自定义字典"></a>2. 添加用户自定义字典</h3><h4 id="原理很简单-直接上代码"><a href="#原理很简单-直接上代码" class="headerlink" title="原理很简单, 直接上代码"></a>原理很简单, 直接上代码</h4><p>  &emsp;用户字典如:<br>  <figure class="image-box">
                <img src="user_dict.png" alt="user_dict图片" title class>
                <p>user_dict图片</p>
            </figure></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="title">jieba</span>.load_userdict(<span class="string">"dict/user_dict"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> = [</span></span><br><span class="line">    <span class="string">"世界经济论坛也叫达沃斯论坛"</span>,</span><br><span class="line">    <span class="string">"The World Economic Forum is also called the Davos Forum."</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title">for</span> d <span class="keyword">in</span> <span class="class"><span class="keyword">data</span>:</span></span><br><span class="line">    result = jieba.lcut(d)</span><br><span class="line">    print(<span class="string">","</span>.join(result))</span><br></pre></td></tr></table></figure>

<h3 id="3-关键字提取"><a href="#3-关键字提取" class="headerlink" title="3. 关键字提取"></a>3. 关键字提取</h3><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jieba<span class="selector-class">.analyse</span><span class="selector-class">.extract_tags</span>(sentence, topK=<span class="number">20</span>, withWeight=False, allowPOS=(<span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>))</span><br><span class="line">jieba<span class="selector-class">.analyse</span><span class="selector-class">.textrank</span>(sentence, topK=<span class="number">20</span>, withWeight=False, allowPOS=(<span class="string">'ns'</span>, <span class="string">'n'</span>, <span class="string">'vn'</span>, <span class="string">'v'</span>))</span><br></pre></td></tr></table></figure>

<h4 id="参数详解-1"><a href="#参数详解-1" class="headerlink" title="参数详解"></a>参数详解</h4><p>  &emsp;sentence：待提取的文本<br>  &emsp;topK：返回K个权重最大的关键词<br>  &emsp;withWeight：是否返回权重<br>  &emsp;allowPOS：是否仅包括指定词性的词</p>
<p>  &emsp;extract_tags 基于 TF-IDF, textrand 基于 TextRank(具体算法可以自行Google)</p>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import jieba.analyse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键词提取</span></span><br><span class="line">kWords = jieba.analyse.extract_tags(<span class="string">"此外，公司拟对全资子公司吉林欧亚置业有限公司增资4.3亿元，"</span> + </span><br><span class="line">                                    <span class="string">"增资后，吉林欧亚置业注册资本由7000万元增加到5亿元。吉林欧亚"</span> + </span><br><span class="line">                                    <span class="string">"置业主要经营范围为房地产开发及百货零售等业务。目前在建吉林欧"</span> + </span><br><span class="line">                                    <span class="string">"亚城市商业综合体项目。2013年，实现营业收入0万元，实现净利润-139.13万元。"</span>,</span><br><span class="line">                                    <span class="attribute">topK</span>=5, <span class="attribute">withWeight</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word, weight <span class="keyword">in</span> kWords:</span><br><span class="line">    <span class="builtin-name">print</span>(word, <span class="string">":"</span>, weight)</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用方法</span><br><span class="line"><span class="selector-tag">jieba</span><span class="selector-class">.posseg</span><span class="selector-class">.cut</span>(<span class="selector-tag">sentence</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line">import jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line">src_sentence = <span class="string">"我爱北京天安门"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">words</span> = pseg.cut(src_sentence)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">word</span>, flag <span class="keyword">in</span> <span class="built_in">words</span>:</span><br><span class="line">    print(<span class="string">"%s %s"</span> % (<span class="built_in">word</span>, flag))</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="cixingbiaozhu.png" alt="词性标注结果图" title class>
                <p>词性标注结果图</p>
            </figure>
<h4 id="并行分词"><a href="#并行分词" class="headerlink" title="并行分词"></a>并行分词</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法：</span></span><br><span class="line">  <span class="keyword">jieba.enable_parallel(4) </span><span class="comment"># 开启并行模式，参数为并行进程数</span></span><br><span class="line">  <span class="keyword">jieba.disable_parallel() </span><span class="comment"># 关闭并行分词模式</span></span><br></pre></td></tr></table></figure>

<p>&emsp;原理： 文本按行分割后，分配到多个Python进程并行分词，最后归并结果。<br>&emsp;效果： 在4核3.4GHzLinux机器上，对金庸全集进行精确分词，获得了1MB/s的速度，是单进程版的3.3倍。<br>&emsp;注意： 并行分词仅支持默认分词器jieba.dt和jieba.posseg.dt。目前不支持Windows</p>
<h4 id="返回词语在原文的起始位置"><a href="#返回词语在原文的起始位置" class="headerlink" title="返回词语在原文的起始位置"></a>返回词语在原文的起始位置</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">result = jieba.tokenize(<span class="string">"永和服装饰品有限公司"</span>)</span><br><span class="line"><span class="keyword">for</span> tk in result:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"word %s\t\t start: %d \t\t end: %d"</span> % (tk[<span class="number">0</span>], tk[<span class="number">1</span>], tk[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="last.png" alt="并行分词结果图" title class>
                <p>并行分词结果图</p>
            </figure>

]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> jieba </tag>
            
            <tag> 自动分词 </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PySpider安装中的问题(mac)]]></title>
      <url>/2019/04/07/PySpider/</url>
      <content type="html"><![CDATA[<h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><h3 id="emsp-nbsp-mac-打开-Shell"><a href="#emsp-nbsp-mac-打开-Shell" class="headerlink" title="&emsp;&nbsp;  mac 打开 Shell"></a>&emsp;&nbsp;  mac 打开 Shell</h3><h3 id="emsp-nbsp-pip-install-pyspider"><a href="#emsp-nbsp-pip-install-pyspider" class="headerlink" title="&emsp;&nbsp;  pip install pyspider"></a>&emsp;&nbsp;  pip install pyspider</h3><h2 id="使用过程："><a href="#使用过程：" class="headerlink" title="使用过程："></a>使用过程：</h2><h3 id="emsp-nbsp-打开mac的terminal界面"><a href="#emsp-nbsp-打开mac的terminal界面" class="headerlink" title="&emsp;&nbsp;  打开mac的terminal界面"></a>&emsp;&nbsp;  打开mac的terminal界面</h3><h3 id="emsp-nbsp-在终端界面-输入"><a href="#emsp-nbsp-在终端界面-输入" class="headerlink" title="&emsp;&nbsp;  在终端界面, 输入"></a>&emsp;&nbsp;  在终端界面, 输入</h3><p>&emsp;&emsp;</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider <span class="keyword">all</span></span><br></pre></td></tr></table></figure>

<h4 id="emsp-nbsp-问题1："><a href="#emsp-nbsp-问题1：" class="headerlink" title="&emsp;&nbsp; 问题1："></a>&emsp;&nbsp; 问题1：</h4><p>&emsp;&emsp;&nbsp; ImportError: pycurl: libcurl link-time ssl backend is different from compile-time ssl backend </p>
<p>&emsp;&emsp;&nbsp; 这种情况是mac独有的（pycurl与libcurl版本冲突）  </p>
<p>&emsp;&emsp;&nbsp; 根据第一个括号中内容的不同:  </p>
<p>&emsp;&emsp;&emsp; nss：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pycurl </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYCURL_SSL_LIBRARY</span>=nss</span><br><span class="line">pip install pycurl</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;&emsp; openssl：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pycurl </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYCURL_SSL_LIBRARY</span>=openssl</span><br><span class="line">pip install pycurl</span><br></pre></td></tr></table></figure>

<h4 id="emsp-nbsp-问题2："><a href="#emsp-nbsp-问题2：" class="headerlink" title="&emsp;&nbsp; 问题2："></a>&emsp;&nbsp; 问题2：</h4><p>&emsp;&emsp;&nbsp; Could not create web server listening on port xxx</p>
<p>&emsp;&emsp;&nbsp; 这种情况在shell中直接输入lsof -i:xxx 查看xxx端口是否已经被使用</p>
<pre><code>若显示出类似: 

    COMMAND   PID    USER     FD   TYPE  DEVICE SIZE/OFF    ---

   phantomjs  815  thekernel  12u  IPv4 0xa481aab9e34a6609  ---</code></pre><p>&emsp;&emsp;&nbsp; 在终端输入:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-9</span> <span class="number">815</span>(自己对应的PID)</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> pyspider </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/04/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
